51.
    select name,population,area from world 
    where area >= 3000000 or population >=25000000;
    
 52.
         
    select name from customer 
    where refree_id not like 2 or refree_id is null;
    
 53.
 
     select name from customers
     where id not in (select customer_id from orders)
     
           OR 
           
      select name from (
      select c.id, c.name, o.id as order_id from customers c
      left join orders o on c.id = o.customer_id)tmp 
      where order_id is null

  54.
      select employee_id,
      count(employee_id) over (partition by team_id ) as team_size
      from employee
      order by employee_id
  55.
      
  56.
      select player_id , device_id from 
      (select *,
      rank() over (partition by player_id order by event_date) as ranks
      from activity) tmp 
      where ranks = 1
  57.
        with cte as (select customer_number, count(order_number) as total_orders from orders 
        group by customer_number) 
        select customer_number from cte
        order by total_orders desc limit 1
        
   58.
        select distinct c1.seat_id from cinema c1
        inner join cinema c2 
        on abs(c1.seat_id - c2.seat_id) = 1
        where c1.free = 1 and c2.free = 1
        order by seat_id
   59.
        with cte as(
        select o.*,c.name as c_name
        from orders o left join 
        company c on o.company_id = c.company_id),
        cte2 as(
        select distinct s.*, cte.c_name from cte 
        right join sales_person s on cte.sales_id = s.sales_id )
        select name from cte2
        where name not in (select name from cte2 where c_name like 'RED') 
        or name is null
        
   60.
   
         select *, 
                CASE when x+y > z then 'Yes' else 'No'   
                end  as triangle
         from triangle
  61.
        select p.x, p1.x,
        abs(p.x-p1.x) as distance 
        from point p 
        inner join point p1 on p.x != p1.x 
        order by distance limit 1
        
   62.
        with cte as ( select actor_id,director_id, count(timestamp) as counts from actor_director group by 1,2)
        select * from cte 
        where counts >=3
   63.
  
        select p.product_name,s.year, s.price 
        from sales s left join product p 
        on s.product_id = p.product_id;

   64.
        with cte as(
        select p.*, e.experience_years
        from project p left join employ e 
        on p.employee_id = e.employee_id)
        select project_id, round(avg(experience_years),2) as average_years from cte 
        group by project_id;
        
        
                  OR 
                  
        select p.project_id, round(avg(e.experience_years),2) as average_years
        from project p left join employ e 
        on p.employee_id = e.employee_id
        group by p.project_id        
 
 65.
        select seller_id from sales
        group by seller_id
        having sum(price) = (select sum(price) from sales group by seller_id 
                             order by sum(price) desc limit 1)


66.
        with cte as(
        select s.*, p.product_name 
        from sales s left join pro p 
        on s.product_id = p.product_id)
        select buyer_id from cte 
        where product_name like 'S8' and 
        product_name not like 'Iphone'

  
  67.
        with cte as(
        select visited_on, sum(amount) as amount from customer 
        group by visited_on order by  visited_on),
        cte2 as( select visited_on,
        sum(amount) over (order by visited_on range between interval '6' day preceding and 
                          current row) as amount,
        round(avg(amount) over (order by visited_on range between interval '6' day preceding and 
                        current row ),2) as average_amount,
        rank() over (order by visited_on) as rnk from cte )
        select visited_on, amount,average_amount from cte2 where rnk >6

  68.
  
        select gender, day, 
        sum(score_points) over (partition by gender order by day) as total 
        from scores 
        order by gender, day 
        
  69.
  
          select min(log_id) as start_id,
               max(log_id) as end_id 
          from(
                select log_id, rank() over (order by  log_id- RN ) AS ranking
                FROM (
                      select log_id,row_number() over(ORDER BY log_id) AS RN 
                      FROM logs
                     )tmp2
              )tmp3
            group by ranking 
            order by start_id

70.

